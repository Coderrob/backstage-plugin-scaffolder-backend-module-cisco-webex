{"version":3,"file":"index.cjs.js","sources":["../src/actions/webhooks/sendWebhooksMessageAction.ts"],"sourcesContent":["import axios, { HttpStatusCode } from 'axios';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { z } from 'zod';\nimport { format } from 'node:util';\n\nconst ERROR_MESSAGE_FORMAT = 'Failed to send webhook message to %s (HTTP %d)';\n\n/**\n * Creates a `webex:webhooks:sendMessage` Scaffolder action.\n *\n * @public\n */\nexport function createSendWebhooksMessageAction() {\n  return createTemplateAction<{\n    format: string;\n    message: string;\n    webhooks: string[];\n  }>({\n    id: 'webex:webhooks:sendMessage',\n    description: 'Sends a message using Webex Incoming Webhooks',\n    schema: {\n      input: z.object({\n        format: z\n          .enum(['text', 'markdown'])\n          .describe('The message content format'),\n        message: z\n          .string({\n            required_error: 'Message is required',\n            invalid_type_error: 'Message must be a string',\n          })\n          .min(1, 'Message should not be empty')\n          .describe('The message to send via webhook(s)'),\n        webhooks: z\n          .string({\n            required_error: 'Webhook urls are required',\n            invalid_type_error: 'Webhook urls must be a string array',\n          })\n          .array()\n          .nonempty()\n          .describe('The Webex Incoming Webhooks to send a message to'),\n      }),\n    },\n    async handler(ctx) {\n      const failedMessages: string[] = [];\n      const webhooks: string[] = ctx.input.webhooks || [];\n      for (const webhook of webhooks) {\n        try {\n          const { status } = await axios.post(webhook, {\n            [ctx.input.format]: ctx.input.message,\n          });\n          if (status !== HttpStatusCode.Ok) {\n            failedMessages.push(format(ERROR_MESSAGE_FORMAT, webhook, status));\n          }\n        } catch (error) {\n          const status = axios.isAxiosError(error) ? error.status : 500;\n          failedMessages.push(format(ERROR_MESSAGE_FORMAT, webhook, status));\n        }\n      }\n      ctx.output('failedMessages', failedMessages);\n    },\n  });\n}\n"],"names":["createTemplateAction","z","axios","HttpStatusCode","format"],"mappings":";;;;;;;;;;;AAKA,MAAM,oBAAuB,GAAA,gDAAA,CAAA;AAOtB,SAAS,+BAAkC,GAAA;AAChD,EAAA,OAAOA,yCAIJ,CAAA;AAAA,IACD,EAAI,EAAA,4BAAA;AAAA,IACJ,WAAa,EAAA,+CAAA;AAAA,IACb,MAAQ,EAAA;AAAA,MACN,KAAA,EAAOC,MAAE,MAAO,CAAA;AAAA,QACd,MAAA,EAAQA,MACL,IAAK,CAAA,CAAC,QAAQ,UAAU,CAAC,CACzB,CAAA,QAAA,CAAS,4BAA4B,CAAA;AAAA,QACxC,OAAA,EAASA,MACN,MAAO,CAAA;AAAA,UACN,cAAgB,EAAA,qBAAA;AAAA,UAChB,kBAAoB,EAAA,0BAAA;AAAA,SACrB,CACA,CAAA,GAAA,CAAI,GAAG,6BAA6B,CAAA,CACpC,SAAS,oCAAoC,CAAA;AAAA,QAChD,QAAA,EAAUA,MACP,MAAO,CAAA;AAAA,UACN,cAAgB,EAAA,2BAAA;AAAA,UAChB,kBAAoB,EAAA,qCAAA;AAAA,SACrB,CACA,CAAA,KAAA,GACA,QAAS,EAAA,CACT,SAAS,kDAAkD,CAAA;AAAA,OAC/D,CAAA;AAAA,KACH;AAAA,IACA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAA,MAAM,iBAA2B,EAAC,CAAA;AAClC,MAAA,MAAM,QAAqB,GAAA,GAAA,CAAI,KAAM,CAAA,QAAA,IAAY,EAAC,CAAA;AAClD,MAAA,KAAA,MAAW,WAAW,QAAU,EAAA;AAC9B,QAAI,IAAA;AACF,UAAA,MAAM,EAAE,MAAO,EAAA,GAAI,MAAMC,sBAAA,CAAM,KAAK,OAAS,EAAA;AAAA,YAC3C,CAAC,GAAI,CAAA,KAAA,CAAM,MAAM,GAAG,IAAI,KAAM,CAAA,OAAA;AAAA,WAC/B,CAAA,CAAA;AACD,UAAI,IAAA,MAAA,KAAWC,qBAAe,EAAI,EAAA;AAChC,YAAA,cAAA,CAAe,IAAK,CAAAC,gBAAA,CAAO,oBAAsB,EAAA,OAAA,EAAS,MAAM,CAAC,CAAA,CAAA;AAAA,WACnE;AAAA,iBACO,KAAO,EAAA;AACd,UAAA,MAAM,SAASF,sBAAM,CAAA,YAAA,CAAa,KAAK,CAAA,GAAI,MAAM,MAAS,GAAA,GAAA,CAAA;AAC1D,UAAA,cAAA,CAAe,IAAK,CAAAE,gBAAA,CAAO,oBAAsB,EAAA,OAAA,EAAS,MAAM,CAAC,CAAA,CAAA;AAAA,SACnE;AAAA,OACF;AACA,MAAI,GAAA,CAAA,MAAA,CAAO,kBAAkB,cAAc,CAAA,CAAA;AAAA,KAC7C;AAAA,GACD,CAAA,CAAA;AACH;;;;"}